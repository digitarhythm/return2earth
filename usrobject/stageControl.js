// Generated by CoffeeScript 1.6.1
var stageControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

stageControl = (function(_super) {

  __extends(stageControl, _super);

  function stageControl(initparam) {
    stageControl.__super__.constructor.call(this, initparam);
    this.myshipbullet = [];
    GLOBAL['myshipbullet'] = this.myshipbullet;
    this.enemylist = [];
    GLOBAL['enemylist'] = this.enemylist;
    this.enemybullet = [];
    GLOBAL['enemybullet'] = this.enemybullet;
    this.worldend = GLOBAL['worldend'];
    this.scoreobj = addObject({
      type: CONTROL,
      motionObj: scorecontrol
    });
    GLOBAL['scoreobj'] = this.scoreobj;
    GLOBAL['stagecontrol'] = this;
    this.gamecontrolobj = GLOBAL['gamecontrol'];
    this.mapControlObj = GLOBAL['mapcontrol'];
    this.stagenum = 0;
  }

  stageControl.prototype.destructor = function() {
    stageControl.__super__.destructor.call(this);
    if ((this.myshipobj != null)) {
      removeObject(this.myshipobj);
    }
    if ((this.scoreobj != null)) {
      removeObject(this.scoreobj);
    }
    if ((this.stageManager != null)) {
      return removeObject(this.stageManager);
    }
  };

  stageControl.prototype.behavior = function() {
    stageControl.__super__.behavior.call(this);
    switch (this._processnumber) {
      case 0:
        return nop();
      case 1:
        this.myshipObj = addObject({
          image: 'myship',
          motionObj: myship,
          x: this.worldend.x / 2,
          y: GLOBAL['GAMESCREEN_HEIGHT'] / 5 * 4,
          width: 128,
          height: 128,
          scaleX: 0.4,
          scaleY: 0.4,
          animlist: [[30, [0, 1]], [30, [2]], [30, [3]]],
          scene: GAMESCENE_SUB2,
          worldview: true
        });
        GLOBAL['myship'] = this.myshipObj;
        this.stageManager = addObject({
          type: CONTROL,
          motionObj: stage1
        });
        return this.nextjob();
      case 2:
        return nop();
    }
  };

  stageControl.prototype.myshipRemoveBullet = function(bullet) {
    var num, obj, _i, _len, _ref, _results;
    _ref = this.myshipbullet;
    _results = [];
    for (num = _i = 0, _len = _ref.length; _i < _len; num = ++_i) {
      obj = _ref[num];
      if ((obj != null) && (bullet != null)) {
        if (obj._uniqueID === bullet._uniqueID) {
          this.myshipbullet.splice(num, 1);
          removeObject(obj);
          break;
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  stageControl.prototype.enemyRemoveBullet = function(bullet, flag) {
    var num, obj, _i, _len, _ref, _results;
    if (flag == null) {
      flag = false;
    }
    _ref = this.enemybullet;
    _results = [];
    for (num = _i = 0, _len = _ref.length; _i < _len; num = ++_i) {
      obj = _ref[num];
      if ((obj != null) && (bullet != null)) {
        if (obj._uniqueID === bullet._uniqueID) {
          this.enemybullet.splice(num, 1);
          removeObject(obj);
          break;
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  stageControl.prototype.removeEnemy = function(enemy) {
    var num, obj, _i, _len, _ref;
    if ((enemy != null)) {
      removeObject(enemy);
      _ref = this.enemylist;
      for (num = _i = 0, _len = _ref.length; _i < _len; num = ++_i) {
        obj = _ref[num];
        if (obj._uniqueID === enemy._uniqueID) {
          this.enemylist.splice(num, 1);
        }
      }
    }
    obj = addObject({
      image: 'enemy01',
      motionObj: enemy01,
      width: 32,
      height: 32,
      x: rand(GLOBAL['GAMESCREEN_WIDTH']),
      y: 0,
      scaleX: 3.0,
      scaleY: 3.0,
      animlist: [[100, [5, 6, 5, 7]]],
      worldview: true
    });
    return this.enemylist.push(obj);
  };

  stageControl.prototype.enemyRemoveAllBullet = function() {
    var obj, _i, _len, _ref;
    _ref = this.enemybullet;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      removeObject(obj);
    }
    return this.enemybullet.length = 0;
  };

  stageControl.prototype.myshipRemoveAllBullet = function() {
    var obj, _i, _len, _ref;
    _ref = this.myshipbullet;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      removeObject(obj);
    }
    return this.myshipbullet.length = 0;
  };

  stageControl.prototype.enemyRemoveAll = function() {
    var obj, _i, _len, _ref;
    _ref = this.enemylist;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      removeObject(obj);
    }
    return this.enemylist.length = 0;
  };

  stageControl.prototype.setStage = function(num) {
    switch (num) {
      case 1:
        return this.setProcessNumber(1);
    }
  };

  return stageControl;

})(_stationary);
