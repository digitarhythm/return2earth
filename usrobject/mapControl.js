// Generated by CoffeeScript 1.6.1
var mapControl,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

mapControl = (function(_super) {

  __extends(mapControl, _super);

  function mapControl(initparam) {
    var arr, i, j, k, tmp2, _i, _j, _k, _l, _len, _ref, _ref1;
    mapControl.__super__.constructor.call(this, initparam);
    this.map = [];
    for (k = _i = 0; _i < 2; k = ++_i) {
      tmp2 = [];
      for (i = _j = 0, _ref = GLOBAL['GAMESCREEN_HEIGHT'] / 32; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        this.tmp = [];
        for (j = _k = 0, _ref1 = GLOBAL['GAMESCREEN_WIDTH'] / 32; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; j = 0 <= _ref1 ? ++_k : --_k) {
          this.tmp.push(rand(20) === 0 ? rand(2) + 1 : 0);
        }
        tmp2.push(this.tmp);
      }
      for (_l = 0, _len = tmp2.length; _l < _len; _l++) {
        arr = tmp2[_l];
        tmp2.push(arr);
      }
      this.map.push(tmp2);
    }
  }

  mapControl.prototype.destructor = function() {
    return mapControl.__super__.destructor.call(this);
  };

  mapControl.prototype.behavior = function() {
    var y2;
    mapControl.__super__.behavior.call(this);
    switch (this._processnumber) {
      case 0:
        if ((this.mapObject != null)) {
          if (this.mapObject.y > GLOBAL['GAMESCREEN_HEIGHT']) {
            y2 = this.mapObject.y;
            this.mapObject.y = this.mapObject.y - GLOBAL['GAMESCREEN_HEIGHT'];
          }
        }
        if ((this.mapObject2 != null)) {
          if (this.mapObject2.y > GLOBAL['GAMESCREEN_HEIGHT']) {
            return this.mapObject2.y = this.mapObject2.y - GLOBAL['GAMESCREEN_HEIGHT'];
          }
        }
    }
  };

  mapControl.prototype.dispMap = function(num, speed) {
    if (speed == null) {
      speed = 1;
    }
    if ((this.mapObject != null)) {
      removeObject(this.mapObject);
    }
    if ((this.mapObject2 != null)) {
      removeObject(this.mapObject2);
    }
    if (num === 0) {
      this.mapObject = addObject({
        image: 'star',
        type: MAP,
        map: this.map[0],
        x: GLOBAL['GAMESCREEN_WIDTH'] / 2,
        y: 0,
        width: 32,
        height: 32,
        ys: speed,
        scene: BGSCENE
      });
      return this.mapObject2 = addObject({
        image: 'star',
        type: MAP,
        map: this.map[1],
        x: GLOBAL['GAMESCREEN_WIDTH'] / 2,
        y: 0,
        width: 32,
        height: 32,
        ys: speed * 0.5,
        scene: BGSCENE
      });
    }
  };

  return mapControl;

})(_stationary);
