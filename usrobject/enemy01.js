// Generated by CoffeeScript 1.6.1
var enemy01,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

enemy01 = (function(_super) {

  __extends(enemy01, _super);

  function enemy01(initparam) {
    var collider;
    enemy01.__super__.constructor.call(this, initparam);
    this.gamecontrolobj = GLOBAL['gamecontrol'];
    this.stagecontrolobj = GLOBAL['stagecontrol'];
    this.enemylist = GLOBAL['enemylist'];
    this.enemybullet = GLOBAL['enemybullet'];
    this.myshipbullet = GLOBAL['myshipbullet'];
    this.myship = GLOBAL['myship'];
    this.scoreobj = GLOBAL['scoreobj'];
    this.basex = this.x;
    this.worldend = GLOBAL['worldend'];
    this.xs = rand(8) - 4;
    this.ys = rand(4) + 1;
    this.angle = 30;
    this.angleadd = 12;
    this.speed = 12;
    this.fireinterval = 0.1;
    this.firecount = 0.0;
    this.aim_speed = 8;
    this.aim_fireinterval = 0.5;
    this.aim_firecount = 0.0;
    collider = addObject({
      image: 'scorebg',
      x: this.x,
      y: this.y,
      width: 48,
      height: 48,
      scene: TOPSCENE
    });
    this.collider = collider;
  }

  enemy01.prototype.destructor = function() {
    return enemy01.__super__.destructor.call(this);
  };

  enemy01.prototype.behavior = function() {
    var arc, bullet, dx, dy, xs, ys, _i, _len, _ref, _results;
    enemy01.__super__.behavior.call(this);
    switch (this._processnumber) {
      case 0:
        if (LAPSEDTIME > this.firecount) {
          this.firecount = LAPSEDTIME + this.fireinterval;
          xs = Math.cos(this.angle * RAD);
          ys = Math.sin(this.angle * RAD);
          this.fire(xs * this.speed, ys * this.speed);
          this.angle += this.angleadd;
          if (this.angle > 359) {
            this.angle -= 360;
          }
        }
        if (LAPSEDTIME > this.aim_firecount) {
          this.aim_firecount = LAPSEDTIME + this.aim_fireinterval;
          dx = this.myship.x - this.x;
          dy = (this.myship.y - 16) - this.y;
          arc = Math.sqrt(dx * dx + dy * dy);
          xs = dx / arc;
          ys = dy / arc;
          this.fire(xs * this.aim_speed, ys * this.aim_speed);
        }
        if (this.x < 0 || this.worldend.x < this.x) {
          this.xs *= -1;
        }
        if (this.y < 0 || this.worldend.y < this.y) {
          this.ys *= -1;
        }
        _ref = this.myshipbullet;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          bullet = _ref[_i];
          if ((bullet != null)) {
            if (this.isIntersect(bullet)) {
              playSound('bomb01');
              addObject({
                type: CONTROL,
                motionObj: burn01,
                x: this.x,
                y: this.y
              });
              this.scoreobj.add(100);
              this.stagecontrolobj.removeEnemy(this);
              _results.push(this.stagecontrolobj.myshipRemoveBullet(bullet));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
    }
  };

  enemy01.prototype.fire = function(xs, ys) {
    var obj;
    obj = addObject({
      image: 'enemybullet',
      motionObj: enemyBullet,
      width: 16,
      height: 16,
      scaleX: 0.75,
      scaleY: 0.75,
      x: this.x,
      y: this.y,
      xs: xs,
      ys: ys,
      animlist: [[100, [0]]],
      scene: GAMESCENE,
      worldview: true
    }, this);
    return this.enemybullet.push(obj);
  };

  return enemy01;

})(_stationary);
