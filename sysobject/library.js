// Generated by CoffeeScript 1.6.1
var JSLog, getBounds, getCookie, getKeyDirection, isWebGL, nop, rand, separateGETquery, setCookie, sprintf, swap, uniqueID, userStr, __getTime,
  __slice = [].slice;

rand = function(n) {
  return parseInt(Math.floor(Math.random() * (n + 1)));
};

JSLog = function() {
  var a, b, data, data2, match, num, repstr, zero, _i, _len;
  a = arguments[0], b = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  if (DEBUG === true) {
    for (_i = 0, _len = b.length; _i < _len; _i++) {
      data = b[_i];
      match = a.match(/%0\d*@/);
      if ((match != null)) {
        repstr = match[0];
        num = parseInt(repstr.match(/\d+/));
        zero = "";
        while (zero.length < num) {
          zero += "0";
        }
        data2 = (zero + data).substr(-num);
        a = a.replace(repstr, data2);
      } else {
        a = a.replace('%@', data);
      }
    }
    return console.log(a);
  }
};

sprintf = function() {
  var a, b, data, data2, match, num, repstr, zero, _i, _len;
  a = arguments[0], b = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  for (_i = 0, _len = b.length; _i < _len; _i++) {
    data = b[_i];
    match = a.match(/%0\d*@/);
    if ((match != null)) {
      repstr = match[0];
      num = parseInt(repstr.match(/\d+/));
      zero = "";
      while (zero.length < num) {
        zero += "0";
      }
      data2 = (zero + data).substr(-num);
      a = a.replace(repstr, data2);
    } else {
      a = a.replace('%@', data);
    }
  }
  return a;
};

uniqueID = function() {
  var S4;
  S4 = function() {
    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
  };
  return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
};

getBounds = function() {
  var frame;
  frame = [parseInt(document.documentElement.clientWidth - 1), parseInt(document.documentElement.clientHeight - 1)];
  return frame;
};

getKeyDirection = function() {
  var dir;
  dir = {
    x: 0,
    y: 0
  };
  if (core.input.up) {
    dir['y'] = -1;
  }
  if (core.input.down) {
    dir['y'] = 1;
  }
  if (core.input.right) {
    dir['x'] = 1;
  }
  if (core.input.left) {
    dir['x'] = -1;
  }
  return dir;
};

setCookie = function(name, value, expireValue) {
  var maxage;
  if (expireValue == null) {
    expireValue = 1;
  }
  maxage = expireValue * 24 * 3600;
  return document.cookie = name + '=' + escape(value) + '; max-age=' + maxage;
};

getCookie = function(name) {
  var allcookies, cookie, i, result, _i, _ref;
  result = [];
  allcookies = document.cookie.split('; ');
  if (allcookies.length > 0) {
    for (i = _i = 0, _ref = allcookies.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      cookie = allcookies[i].split('=');
      result[cookie[0]] = decodeURIComponent(cookie[1]);
    }
  }
  return result[name];
};

isWebGL = function() {
  try {
    return !!window.WebGLRenderingContext && !!document.createElement('canvas').getContext('experimental-webgl');
  } catch (e) {
    return false;
  }
};

swap = function(a, b) {
  var c;
  c = a;
  a = b;
  return b = c;
};

separateGETquery = function() {
  var element, i, paramName, paramValue, parameters, query, result, _i, _ref;
  result = {};
  if (1 < window.location.search.length) {
    query = window.location.search.substring(1);
    parameters = query.split('&');
    for (i = _i = 0, _ref = parameters.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      element = parameters[i].split('=');
      paramName = decodeURIComponent(element[0]);
      paramValue = decodeURIComponent(element[1]);
      result[paramName] = paramValue.replace(/\+/g, ' ');
    }
  }
  return result;
};

userStr = {
  encode: function(str) {
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
  },
  decode: function(str) {
    return str.replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#39;/g, '\'').replace(/&amp;/g, '&');
  }
};

__getTime = function() {
  return parseFloat((new Date).getTime());
};

nop = function() {};
